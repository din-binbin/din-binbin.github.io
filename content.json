{"meta":{"title":"Thinking Coding","subtitle":null,"description":null,"author":"ice","url":"http://ice-io.github.io"},"pages":[{"title":"about","date":"2017-08-25T11:54:41.000Z","updated":"2017-08-25T11:57:04.322Z","comments":true,"path":"about/index.html","permalink":"http://ice-io.github.io/about/index.html","excerpt":"","text":"About Me"},{"title":"分类","date":"2017-08-25T13:26:44.000Z","updated":"2017-08-25T13:27:15.951Z","comments":true,"path":"categories/index.html","permalink":"http://ice-io.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-08-25T13:24:35.000Z","updated":"2017-08-25T13:25:42.461Z","comments":true,"path":"tags/index.html","permalink":"http://ice-io.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"前端知识总结 —— HTML篇","slug":"前端知识总结——HTML基础篇","date":"2017-08-25T14:07:50.000Z","updated":"2017-08-26T11:48:08.545Z","comments":true,"path":"2017/08/25/前端知识总结——HTML基础篇/","link":"","permalink":"http://ice-io.github.io/2017/08/25/前端知识总结——HTML基础篇/","excerpt":"从之前的不懂，到现在可以用HTML5和canvas制作一个小游戏，收获是很多的。但是，学习是一个循序渐进的过程，学而时习之，不亦说乎嘛。","text":"从之前的不懂，到现在可以用HTML5和canvas制作一个小游戏，收获是很多的。但是，学习是一个循序渐进的过程，学而时习之，不亦说乎嘛。 1. HTML基础结构1234567891011&lt;DOCTYPE html&gt; &lt;!--文档声明，告诉浏览器应该使用哪种规范来解析--&gt;&lt;html&gt; &lt;!--根元素，所有的元素都是其子元素--&gt; &lt;head&gt; &lt;!--head元素，包含网页的基本信息和元数据--&gt; &lt;meta charset='utf-8'&gt; &lt;!--meta元素，存放元数据，由name和http-equiv两个属性--&gt; &lt;title&gt;我是网页标题&lt;/title&gt; &lt;!--title元素，表示网页标题--&gt; &lt;/head&gt; &lt;body&gt; &lt;!--body元素，存放页面内容--&gt; &lt;h1&gt;我是内容标题&lt;/h1&gt; &lt;p&gt;我是段落&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2. 深入了解head元素 head元素包含网页的常规信息和元数据。 其子元素主要为三类： 描述网页基本信息 —— meta元素 指向网页渲染所需要的文件链接 —— link元素和script元素 厂商自定 —— meta元素 3. meta元素神通广大 meta常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。 meta元素共有两个属性，分别是http-equiv属性和name属性。 name属性 主要用于描述网页，比如网页的关键词，叙述等。与之对应的属性值为content，content中的内容是对name填入类型的具体描述，便于搜索引擎抓取。 meta标签中name属性语法格式是： &lt;meta name=&quot;参数&quot; content=&quot;具体的描述&quot;&gt; 取值包括：keywords(关键字)、description(网站内容的描述)、 viewport(移动端的窗口)、robots(定义搜索引擎爬虫的索引方式)、author(作者)、generator(网页制作软件)、copyright(版权)、revisit-after(搜索引擎爬虫重访时间)、renderer(双核浏览器渲染方式)。 http-equiv属性 相当于HTTP的作用，比如说定义些HTTP参数啥的。 meta标签中http-equiv属性语法格式是： &lt;meta http-equiv=&quot;参数&quot; content=&quot;具体的描述&quot;&gt; 取值包括： content-Type(设定网页字符集)(推荐使用HTML5的方式)、X-UA-Compatible(浏览器采取何种版本渲染当前页面)、cache-control(指定请求和响应遵循的缓存机制)、expires(网页到期时间)、refresh(自动刷新并指向某页面)、Set-Cookie(cookie设定)。 可参考 ：HTML meta标签总结与属性使用介绍 4. HTML注释 程序员圈子里面有个非常经典的笑话：“当我写下这段代码的时候，只有我和上帝能看懂。现在，只有上帝能了。” 就如有些人看文章需要做笔记一样，写代码最好也需要做笔记，这个笔记就是注释。注释主要用来解释代码的功能或逻辑，可以辅助阅读代码，当然注释内容本身是不会在浏览器中显示的。大家务必养成注释的习惯，这样即利于你日后阅读，也利于团队小伙伴阅读，否则，你的代码真的只有上帝才能看懂。 HTML注释的语法为：&lt;!-- 注释写这里 --&gt; 5. HTML属性 为了表示元素的一些特征，我们可以在开始标签中添加一些属性。 属性特性 一般属性都具有以下特征： 每个属性之间或与元素名之间都有一个空格隔开 属性名后面紧跟等号 属性值使用双引号包裹但也有一些属性只有属性名，没有属性值，这种属性我们称之为布尔属性。除此之外，我们还可以自定义属性来存储我们的一些数据以便JavaScript使用。可参考HTML data-* 属性 属性分类 属性有很多种，从使用来说大概可以分为三类： 可以用于每个元素的全局属性，如class属性 可用于某一类元素的，如form表单相关元素的name、value属性 只用于某一个元素的，如alt属性只用于img元素 属性参考 HTML 全局属性|W3school HTML 全局属性|MDN HTML 属性参考 6. 常用基本元素 标题元素 &lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt; &lt;h6&gt;标签用来定义标题，其大小依次减小。&lt;h1&gt;为最大的标题，&lt;h6&gt;为最小的标题。 段落元素 &lt;p&gt;标签定义段落，每一个&lt;p&gt;标签默认都另起一行。 图片元素 &lt;img&gt;标签用来在网页中嵌入图片，该标签没有结束标签。（如这种只有一个标签的元素都可以称之为“空元素（empty element）”。 &lt;img&gt;标签有两个必需的属性：src属性 和 alt属性。其中src属性为图片地址，alt属性为如果图片加载失败显示的替换文字。 链接元素 &lt;a&gt;标签定义超链接，用于网页之间的跳转（从一个网页到另一个网页），它有一个重要的属性href，用来指定链接的目标。如果需要新标签页打开，则要添加另一个属性target。 列表元素 列表分为无序列表及有序列表两种，其中无序列表标签为&lt;ul&gt;，有序列表标签为&lt;ol&gt;，其直接的子元素标签为&lt;li&gt;(不能是其他标签)。 div元素 &lt;div&gt;标签用来分割为独立的、不同的部分，每一个&lt;div&gt;标签默认都另起一行。 span元素 &lt;span&gt;标签被用来组合文档中的行内元素。 换行元素 &lt;br&gt;标签可插入一个简单的换行符，它是个空元素，没有结束标签，不包含任何内容。 7. HTML字符实体预留字符 在 HTML 中，某些字符是预留的不能直接使用，如小于号（&lt;）和大于号（&gt;），直接使用会误认为它们是标签。所以如果我们希望正确地显示预留字符，那必须在 HTML 源代码中使用字符实体（character entities），如可以使用&amp;lt;表示小于号（&lt;），&amp;gt;表示大于号（&gt;）。 常用字符实体如下 显示结果 描述 实体名称 实体编号 空格 &amp;nbsp; &amp;#160; &lt; 小于号 &amp;lt; &amp;#60; &gt; 大于号 &amp;gt; &amp;#62; &amp; 和号 &amp;amp; &amp;#38; © 版权 &amp;copy; &amp;#169; × 乘号 &amp;times; &amp;#215; 8. HTML表单表单元素本身是指&lt;form&gt;，不过它也有一个更广泛的概念，指构成表单的所有元素。首先就&lt;form&gt;元素本身来说，主要有两个属性： action：表示表单数据所提交到的处理地址（如果不知道处理地址，可先用#表示） method：表示提交内容的方式，默认取值为 get，可以设置为 post 下面正式介绍一些常用的表单元素 &lt;input&gt;元素 &lt;input&gt;元素跟&lt;img&gt;元素一样，不需要闭合标签。其常见属性如下： 12345678910111213type：必备属性，常见取值如下： text：文本输入框 password：密码输入框 search：搜索框 number：数字输入框 radio：单选按钮 checkbox：复选框 hidden：隐藏域（页面不可见，用来保存数据等） file： 上传文件 button：普通按钮 submit：提交按钮 reset：重置按钮placeholder：如为输入框时，可设置该属性，在输入框中灰色显示提示信息 &lt;textarea&gt;元素 用于多行文本输入，我们常用的评论输入框也是这个。 可以通过 cols 和 rows 属性来规定 textarea 的尺寸，不过等我们学了 CSS 之后，更好的办法是使用 CSS 的 height 和 width 属性来控制其尺寸。 &lt;select&gt;元素 用于创建选项菜单，默认只能选择一个值，可通过设置属性multiple=”multiple” 来实现多选（很少很少使用多选）。 其选项为&lt;option&gt;元素，常用有两个属性： `value`：表示选中该选项的值。 `selected`：表示默认选中。 &lt;button&gt;元素 &lt;button&gt;元素用来定义按钮，跟 input 定义的按钮不同，这个是有闭合标签的。同样也可以通过设置 type 属性来实现提交按钮和重置按钮，不过不建议这么做。一般对于提交与重置按钮，我们建议使用 input 来定义，对于普通按钮可以使用 button。 &lt;label&gt;元素 &lt;label&gt;元素用于关联表单元素的标题，可直接包裹表单元素，也可以通过设置其 for 属性关联到表单元素的 id 属性，这样点击 label 标题上关联的表单元素就 可以自动获取焦点，提升用户体验。示例如下： 1234&lt;!-- 包裹表单元素 --&gt;&lt;label&gt;用户名：&lt;input type=\"text\"&gt;&lt;/label&gt;&lt;!-- 使用for属性关联表单元素的id属性 --&gt;&lt;label for=\"username\"&gt;用户名：&lt;/label&gt;&lt;input type=\"text\" id=\"username\"&gt; 可参考：HTML Form浅析之表单属性","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://ice-io.github.io/tags/HTML/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-08-25T10:01:56.635Z","updated":"2017-08-26T11:48:30.085Z","comments":true,"path":"2017/08/25/hello-world/","link":"","permalink":"http://ice-io.github.io/2017/08/25/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}
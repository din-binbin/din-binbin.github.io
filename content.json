{"meta":{"title":"Thinking Coding","subtitle":null,"description":null,"author":"ice","url":"http://ice-io.github.io"},"pages":[{"title":"about","date":"2017-08-25T11:54:41.000Z","updated":"2017-08-25T11:57:04.322Z","comments":true,"path":"about/index.html","permalink":"http://ice-io.github.io/about/index.html","excerpt":"","text":"About Me"},{"title":"分类","date":"2017-08-25T13:26:44.000Z","updated":"2017-08-25T13:27:15.951Z","comments":true,"path":"categories/index.html","permalink":"http://ice-io.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-08-25T13:24:35.000Z","updated":"2017-08-25T13:25:42.461Z","comments":true,"path":"tags/index.html","permalink":"http://ice-io.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"前端知识总结——CSS","slug":"前端知识总结——CSS基础篇","date":"2017-08-26T14:35:46.000Z","updated":"2017-08-30T02:55:22.413Z","comments":true,"path":"2017/08/26/前端知识总结——CSS基础篇/","link":"","permalink":"http://ice-io.github.io/2017/08/26/前端知识总结——CSS基础篇/","excerpt":"这一篇文章将回顾之前所学的CSS基础知识。","text":"这一篇文章将回顾之前所学的CSS基础知识。 认识CSS CSS，即Cascading Style Sheet，层叠样式表，用来修饰网页。 CSS语法h1{color:red;font-size:20px}包含选择器、属性、属性值，当然最好写成下面的样子方便阅读和维护： 1234h1 &#123; color: red; font-size: 20px;&#125; CSS注释 单行注释：/* 注释内容 */ 多行注释： 1234/* 注释 内容*/ 引入CSS 行内样式（通过标签的style属性）——[缺点：样式结构混在一起；冗余；] 内联样式（通过style标签写入CSS）——[缺点：冗余；] 行内样式（通过link标签引入CSS文件）——[解决了前两种方式的缺点] 但是，这三种方式，各有其应用场景。另外要注意@import引入方式的缺点： 范畴不同：link标签引入属于HTML，@import则属于CSS。 兼容性：@import不兼容旧版浏览器。 加载顺序：@import需要等到文档最后才加载。 脚本操作：@import不支持JavaScript的修改操作。 CSS中的选择器总共分为5大类： 基础选择器、关系选择器、伪类选择器、属性选择器、伪元素选择器。使用时注意选择器分组→→→将相同样式分组定义共用，简化代码。可参考：CSS选择器参考手册 基础选择器 通用选择器(*) 元素选择器(p) 类选择器(.class) id选择器(#id) 关系选择器 子代选择器(div&gt;p) 后代选择器(div p) 兄弟选择器(div~p 、div+p) 伪类选择器 :link :visited :hover :active :first-child :last-child :nth-child(n) :nth-lastchild(n) 伪元素选择器 ::before ::after ::first-letter ::first-line 属性选择器 选择器 描述 [attribute] 用于选取带有指定属性的元素 [attribute=value] 用于选取带有指定属性和值的元素 [attribute\\^=value] 匹配属性值以指定值开头的每个元素 [attribute$=value] 匹配属性值以指定值结尾的每个元素 [attribute*=value] 匹配属性值中包含指定值的每个元素 [attribute~=value] 用于选取属性值中包含指定词汇的元素 [attribute&#124;=value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词 选择器的优化 现在我们知道了选择器有很多种，但是对于浏览器来说，解析每种选择器所耗费的时间并不是一样的。所以当我们使用选择器的时候也有必要了解如何才能写出最优选择器。 各种 CSS 选择器的效率由高至低排序如下： id选择器（#myid） 类选择器（.myclassname） 标签选择器（div,h1,p） 相邻选择器（h1 + p） 子选择器（ul &gt; li） 后代选择器（li a） 通配符选择器（*） 属性选择器（a[rel=&quot;external&quot;]） 伪类选择器（a:hover,li:nth-child） 选择器的解读顺序是怎样的？ 一般来说，在具体的项目中，HTML 结构都比较复杂，所以关系选择器使用非常的普遍。对于关系选择器来说，我们的阅读习惯是从左到右，但是浏览器解读选择器，遵循的原则是从选择器的右边到左边读取。 如对于选择器.list .item .item-tt，浏览器先找的是.item-tt，然后继续向父级元素寻找.item，再找.list，这样才完成了最终的选择器匹配。所以如果路径链越短，效率也就相应有所提高。这里建议选择器的层级最多不要超过4层，如.demo .list .item .item-tt .tt-link就有5层了，可根据实际情况考虑缩短为4层以内，如.demo .item-tt .tt-link。 如何提高CSS选择器性能呢？ CSS选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免使用消耗更多匹配时间的选择器。 可以通过以下几点来优化： 避免使用通用选择器 避免使用标签或 class 选择器来限制 id 选择器 避免使用标签限制 class 选择器 避免使用多层标签选择器。使用 class 选择器替换，减少css查找 避免使用子选择器 使用继承 CSS中的属性和值字体相关属性 font-family：定义文本的字体，如：font-family: arial; font-size：字体尺寸，如：font-size: 18px; font-style ：字体样式，如：font-style: italic; font-weight：字体的粗细，如：font-weight: bold; 文本相关属性 color：定义文字颜色，如：color: red; line-height：设置行高，如：line-height: 1.5; text-align：文本的水平对齐方式，如：text-aligin: center; text-decoration：文本的装饰效果，如：text-decoration: underline; text-indent：首行的缩进，如：text-indent: 2em; text-shadow：文本的阴影效果，如：text-shadow: 0 0 5px #ff0000; 列表属性 list-style：在一个声明中设置所有的列表属性 list-style-image：将图象设置为列表项标记 list-style-position：设置列表项标记的放置位置 list-style-type：设置列表项标记的类型 表格属性 border-collapse：是否合并表格边框 border-spacing：相邻单元格边框之间的距离 table-layout：设置表格的布局算法 盒子大小 width min-width max-width height min-height max-height box-sizing 盒子边框 border：简写模式，四边边框 border-width：边框宽度 border-style：边框样式，常用的为solid和dashed border-color：边框颜色 border-top：上边框 border-right：右边框 border-bottom：下边框 border-left：左边框 盒子内外边距 margin margin-top margin-right margin-bottom margin-left padding padding-top padding-right padding-bottom padding-left 盒子背景 background：总的简写形式，包括了下面各个单条属性 background-color：背景色 background-image：背景图片 background-position：背景图片起始位置 background-repeat：背景图片平铺方式 background-size：背景图片大小 background-clip：背景图片绘制区域 background-origin：背景图片的定位区域 盒子其他 overflow：指定当内容溢出其块级容器时,是否剪辑内容，渲染滚动条或显示内容 visibility：是否可见 border-radius：圆角 box-shadow：阴影 空间位置相关 display float clear position top right bottom left transform z-index opacity 动画相关 transition animation 可参考:CSS 参考 | MDN 、CSS 参考手册 | W3school 自定义字体 一般来说，网页上的字体使用的都是我们电脑里面的字体，比如我们常说的微软雅黑、宋体就是 windows 系统自带的字体。所以你可以看到网页的字体一般都比较中规中矩，不像平面设计那样各种新花样。但是我们在浏览一些网站时，还是可以发现一些非常酷炫和高端的字体。 那么如何实现自定义字体的效果呢？答案是 CSS 的 @font-face 。 @font-face 的语法规则如下： 123456@font-face &#123; font-family: &lt;fontFamily&gt;; /* 自定义的字体名称; */ src: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*; /* 自定义的字体的存放路径、格式; */ [font-weight: &lt;weight&gt;]; /* 是否为粗体 */ [font-style: &lt;style&gt;]; /* 定义字体样式，如斜体 */&#125; 其取值说明如下： fontFamily：此值指的就是你自定义的字体名称，如font-family: myFirstFont。 source：此值指的是你自定义的字体的存放路径，可以是相对路径也可以是绝对路径。 format：此值表达自定义的字体的格式，用于帮助浏览器识别字体类型。 weight和style：这两个值大家一定很熟悉，weight 定义字体是否为粗体，style 主要定义字体样式，如斜体。 推荐：dafont字体 字体格式 TrueType (.ttf) Windows 和 Mac 系统最常用的字体格式，其最大的特点就是它是由一种数学模式来进行定义的基于轮廓技术的字体，这使得它们比基于矢量的字体更容易处理，保证了屏幕与打印输出的一致性。同时，这类字体和矢量字体一样可以随意缩放、旋转而不必担心会出现锯齿。 OpenType (.otf) OpenType 是一种可缩放字型（scalable font）电脑字体类型，采用 PostScript 格式，是美国微软公司与Adobe 公司联合开发，用来替代 TrueType 字型的新字型。这类字体的文件扩展名为.otf，类型代码是 OTTO。 Embedded Open Type (.eot) 嵌入字体格式（EOT）是微软开发的一种技术，允许 OpenType 字体嵌入到网页并可以下载至浏览器渲染。这些文件只在当前页活动的状态下，临时安装在用户的系统中。 Web Open Font Format (.woff) 相对于 TrueType 和 OpenType ，WOFF（Web开发字体格式）是一种专门为了 Web 而设计的字体格式标准，它并不复杂，实际上只是对于 TrueType / OpenType 等字体格式的封装，并针对网络使用加以优化：每个字体文件中含有字体以及针对字体的元数据（ Metadata ），字体文件被压缩，以便于网络传输，并且不包含任何加密或者 DRM 措施。 Scalable Vector Graphics Fonts (.svg) 顾名思义，就是使用SVG技术来呈现字体，还有一种 gzip 压缩格式的 SVG 字体 .svgz。 这么多字体带来的问题是浏览器的支持：目前现代浏览器基本都支持 .ttf、 .otf、 .woff 的字体格式。但需要注意的是 IE8以下仅支持 .eot 格式，而 .svg 目前只有 safari 支持。 自定义图标字体（iconfont） 我们经常会在网页中使用这些图标，以前主要是通过背景图去做的，每次换个颜色或改个大小就得重新切个图，所以维护使用比较繁琐。这样图标字体就应时而生，它提供了一种解决方案：把一些简单的图标制作成字体，然后让图标变成和文字一样可以通过 CSS 去改变颜色大小等。 对于使用图片的图标来说，iconfont 图标有许多优点： 灵活性：改变图标的颜色，背景色，大小都非常简单 兼容性：基本没有兼容性问题，在IE6，Android2.3都能够兼容 扩展性：替换图标很方便，新增图标也非常简单 高效性：iconfont有矢量特性，不会失真 轻便性：在使用上字体文件和普通的静态资源一样，既可以外链也可以内链，并且字体文件也可以使用gzip压缩推荐：Fontello CSS中的单位 pxpx 是 pixels（像素）的缩写，是一种绝对单位，用于屏幕显示器上，传统上一个像素对应于计算机屏幕上的一个点，而对于高清屏则对应更多。任何现代显示屏，不管是手机，平板，笔记本还是电视都是由成千上万的像素组成的，所以我们可以使用这些像素来定义长度。 %%（百分比）应该是我们最好理解的单位了，即相对于父元素。 如果对 html 元素设置 font-size 为百分比值，则是以浏览器默认的字体大小16px为参照计算的（所有浏览器的默认字体大小都为 16px），如62.5%即等于10px（62.5% * 16px = 10px）。 emem 也是一种相对单位，既然是相对单位，那么肯定有一个参照值。不过其参照值并不是固定不变的，而是不同的属性有不同的参照值。 对于字体大小属性（font-size）来说，em 的计算方式是相对于父元素的字体大小，1em 等于父元素设置的字体大小。如果父元素没有设置字体大小，则继续往父级元素查找，直到有设置大小的，如果都没有设置大小，则使用浏览器默认的字体大小。 在(border, width, height, padding, margin, line-height)这些属性中，使用em单位的计算方式是参照该元素的 font-size，1em 等于该元素设置的字体大小。同理如果该元素没有设置，则一直向父级元素查找，直到找到，如果都没有设置大小，则使用浏览器默认的字体大小。 rem和 em 一样，rem 也是一种相对单位，不过不一样的是 rem 是相对于根元素 html 的 font-size 来计算的，所以其参照物是固定的。（rem的r就是表示root，虽然rem相对em进步了很多，但是由于是新技术，不支持IE8以下（包括IE8）,不过幸喜的是移动端可以放心使用） 由于 rem 是基于跟元素 html 的 font-size 来计算的，所以如果改变 html 的 font-size 值，那么所有使用的 rem 单位的大小都会随着改变，这对于移动端适应各种屏幕大小来说还是有点作用的。 vw, vh, vmin, vmax这四个单位属于 v 系单位，它们也是相对单位，是基于视窗大小（浏览器用来显示内容的区域大小）来计算的。 网页中我们很多时候都需要用到满屏，或者屏幕大小的一半等，尤其是移动端，屏幕大小各式各样，而这个时候我们现有的单位就显得有点捉襟见肘，于是就诞生了这四个单位。 vw：基于视窗的宽度计算，1vw 等于视窗宽度的百分之一 vh：基于视窗的高度计算，1vh 等于视窗高度的百分之一 vmin：基于vw和vh中的最小值来计算，1vmin 等于最小值的百分之一 vmax：基于vw和vh中的最大值来计算，1vmax 等于最大值的百分之一 单位运算除了设置以上的单位之外，我们还可以使用 calc 来进行单位运算，单位运算时可以使用各种单位进行加减乘除运算。简单示例如下： 12345.box &#123; height: calc(50vh - 20px); /* 50% 的视窗高度减掉20px */ width: calc(100% / 3); /* 三分之一的父容器宽度 */ background: red;&#125; CSS中的颜色 颜色关键词如 red，green，gray 等，除此之外，还有两个关键词可用，分别是 transparent 和 currentColor。 RGB表示使用红-绿-蓝模式来定义颜色。 十六进制十六进制颜色表现形式为： #RRGGBB 和 #RGB RGBa在 rgb 的基础上，还可以添加一个 alpha 透明度表示半透明值，这样就构成了我 rgba，其函数表示为：rgb(red, green, blue, alpha)，其中 alpha 参数是介于 0.0（完全透明）与 1.0（完全不透明）的数字。 hsl除了使用红-绿-蓝的模式定义颜色之外，还可以通过 hue（色调）、saturation（饱和度）、lightness（亮度）模式定义颜色，其语法为：hsl(hue, saturation, lightness) 。 CSS中的盒模型HTML文档中的每个元素在渲染的时候都会被描绘成一个矩形盒子，而盒模型正是用来表示每个元素盒子所占用空间大小的模型。 在我们现实生活中，描述一个矩形直接用宽和高即可。但是在CSS中主要通过四个部分来描述，分别为：margin（外边距），border（边框），padding（内边距），content（内容区域）。如下图：","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://ice-io.github.io/tags/CSS/"}]},{"title":"前端知识总结 —— HTML篇","slug":"前端知识总结——HTML基础篇","date":"2017-08-25T14:07:50.000Z","updated":"2017-08-27T13:47:40.273Z","comments":true,"path":"2017/08/25/前端知识总结——HTML基础篇/","link":"","permalink":"http://ice-io.github.io/2017/08/25/前端知识总结——HTML基础篇/","excerpt":"从之前的不懂，到现在可以用HTML5和canvas制作一个小游戏，收获是很多的。但是，学习是一个循序渐进的过程，学而时习之，不亦说乎嘛。","text":"从之前的不懂，到现在可以用HTML5和canvas制作一个小游戏，收获是很多的。但是，学习是一个循序渐进的过程，学而时习之，不亦说乎嘛。 HTML基础结构1234567891011&lt;DOCTYPE html&gt; &lt;!--文档声明，告诉浏览器应该使用哪种规范来解析--&gt;&lt;html&gt; &lt;!--根元素，所有的元素都是其子元素--&gt; &lt;head&gt; &lt;!--head元素，包含网页的基本信息和元数据--&gt; &lt;meta charset='utf-8'&gt; &lt;!--meta元素，存放元数据，由name和http-equiv两个属性--&gt; &lt;title&gt;我是网页标题&lt;/title&gt; &lt;!--title元素，表示网页标题--&gt; &lt;/head&gt; &lt;body&gt; &lt;!--body元素，存放页面内容--&gt; &lt;h1&gt;我是内容标题&lt;/h1&gt; &lt;p&gt;我是段落&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 深入了解head元素 head元素包含网页的常规信息和元数据。 其子元素主要为三类： 描述网页基本信息 —— meta元素 指向网页渲染所需要的文件链接 —— link元素和script元素 厂商自定 —— meta元素 meta元素神通广大 meta常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。 meta元素共有两个属性，分别是http-equiv属性和name属性。 name属性 主要用于描述网页，比如网页的关键词，叙述等。与之对应的属性值为content，content中的内容是对name填入类型的具体描述，便于搜索引擎抓取。 meta标签中name属性语法格式是： &lt;meta name=&quot;参数&quot; content=&quot;具体的描述&quot;&gt; 取值包括：keywords(关键字)、description(网站内容的描述)、 viewport(移动端的窗口)、robots(定义搜索引擎爬虫的索引方式)、author(作者)、generator(网页制作软件)、copyright(版权)、revisit-after(搜索引擎爬虫重访时间)、renderer(双核浏览器渲染方式)。 http-equiv属性 相当于HTTP的作用，比如说定义些HTTP参数啥的。 meta标签中http-equiv属性语法格式是： &lt;meta http-equiv=&quot;参数&quot; content=&quot;具体的描述&quot;&gt; 取值包括： content-Type(设定网页字符集)(推荐使用HTML5的方式)、X-UA-Compatible(浏览器采取何种版本渲染当前页面)、cache-control(指定请求和响应遵循的缓存机制)、expires(网页到期时间)、refresh(自动刷新并指向某页面)、Set-Cookie(cookie设定)。 可参考 ：HTML meta标签总结与属性使用介绍 HTML注释 程序员圈子里面有个非常经典的笑话：“当我写下这段代码的时候，只有我和上帝能看懂。现在，只有上帝能了。” 就如有些人看文章需要做笔记一样，写代码最好也需要做笔记，这个笔记就是注释。注释主要用来解释代码的功能或逻辑，可以辅助阅读代码，当然注释内容本身是不会在浏览器中显示的。大家务必养成注释的习惯，这样即利于你日后阅读，也利于团队小伙伴阅读，否则，你的代码真的只有上帝才能看懂。 HTML注释的语法为：&lt;!-- 注释写这里 --&gt; HTML属性 为了表示元素的一些特征，我们可以在开始标签中添加一些属性。 属性特性 一般属性都具有以下特征： 每个属性之间或与元素名之间都有一个空格隔开 属性名后面紧跟等号 属性值使用双引号包裹但也有一些属性只有属性名，没有属性值，这种属性我们称之为布尔属性。除此之外，我们还可以自定义属性来存储我们的一些数据以便JavaScript使用。可参考HTML data-* 属性 属性分类 属性有很多种，从使用来说大概可以分为三类： 可以用于每个元素的全局属性，如class属性 可用于某一类元素的，如form表单相关元素的name、value属性 只用于某一个元素的，如alt属性只用于img元素 属性参考 HTML 全局属性|W3school HTML 全局属性|MDN HTML 属性参考 常用基本元素 标题元素 &lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt; &lt;h6&gt;标签用来定义标题，其大小依次减小。&lt;h1&gt;为最大的标题，&lt;h6&gt;为最小的标题。 段落元素 &lt;p&gt;标签定义段落，每一个&lt;p&gt;标签默认都另起一行。 图片元素 &lt;img&gt;标签用来在网页中嵌入图片，该标签没有结束标签。（如这种只有一个标签的元素都可以称之为“空元素（empty element）”。 &lt;img&gt;标签有两个必需的属性：src属性 和 alt属性。其中src属性为图片地址，alt属性为如果图片加载失败显示的替换文字。 链接元素 &lt;a&gt;标签定义超链接，用于网页之间的跳转（从一个网页到另一个网页），它有一个重要的属性href，用来指定链接的目标。如果需要新标签页打开，则要添加另一个属性target。 列表元素 列表分为无序列表及有序列表两种，其中无序列表标签为&lt;ul&gt;，有序列表标签为&lt;ol&gt;，其直接的子元素标签为&lt;li&gt;(不能是其他标签)。 div元素 &lt;div&gt;标签用来分割为独立的、不同的部分，每一个&lt;div&gt;标签默认都另起一行。 span元素 &lt;span&gt;标签被用来组合文档中的行内元素。 换行元素 &lt;br&gt;标签可插入一个简单的换行符，它是个空元素，没有结束标签，不包含任何内容。 HTML字符实体预留字符 在 HTML 中，某些字符是预留的不能直接使用，如小于号（&lt;）和大于号（&gt;），直接使用会误认为它们是标签。所以如果我们希望正确地显示预留字符，那必须在 HTML 源代码中使用字符实体（character entities），如可以使用&amp;lt;表示小于号（&lt;），&amp;gt;表示大于号（&gt;）。 常用字符实体如下 显示结果 描述 实体名称 实体编号 空格 &amp;nbsp; &amp;#160; &lt; 小于号 &amp;lt; &amp;#60; &gt; 大于号 &amp;gt; &amp;#62; &amp; 和号 &amp;amp; &amp;#38; © 版权 &amp;copy; &amp;#169; × 乘号 &amp;times; &amp;#215; HTML表单表单元素本身是指&lt;form&gt;，不过它也有一个更广泛的概念，指构成表单的所有元素。首先就&lt;form&gt;元素本身来说，主要有两个属性： action：表示表单数据所提交到的处理地址（如果不知道处理地址，可先用#表示） method：表示提交内容的方式，默认取值为 get，可以设置为 post 下面正式介绍一些常用的表单元素 &lt;input&gt;元素 &lt;input&gt;元素跟&lt;img&gt;元素一样，不需要闭合标签。其常见属性如下： 12345678910111213type：必备属性，常见取值如下： text：文本输入框 password：密码输入框 search：搜索框 number：数字输入框 radio：单选按钮 checkbox：复选框 hidden：隐藏域（页面不可见，用来保存数据等） file： 上传文件 button：普通按钮 submit：提交按钮 reset：重置按钮placeholder：如为输入框时，可设置该属性，在输入框中灰色显示提示信息 &lt;textarea&gt;元素 用于多行文本输入，我们常用的评论输入框也是这个。 可以通过 cols 和 rows 属性来规定 textarea 的尺寸，不过等我们学了 CSS 之后，更好的办法是使用 CSS 的 height 和 width 属性来控制其尺寸。 &lt;select&gt;元素 用于创建选项菜单，默认只能选择一个值，可通过设置属性multiple=”multiple” 来实现多选（很少很少使用多选）。 其选项为&lt;option&gt;元素，常用有两个属性： `value`：表示选中该选项的值。 `selected`：表示默认选中。 &lt;button&gt;元素 &lt;button&gt;元素用来定义按钮，跟 input 定义的按钮不同，这个是有闭合标签的。同样也可以通过设置 type 属性来实现提交按钮和重置按钮，不过不建议这么做。一般对于提交与重置按钮，我们建议使用 input 来定义，对于普通按钮可以使用 button。 &lt;label&gt;元素 &lt;label&gt;元素用于关联表单元素的标题，可直接包裹表单元素，也可以通过设置其 for 属性关联到表单元素的 id 属性，这样点击 label 标题上关联的表单元素就 可以自动获取焦点，提升用户体验。示例如下： 1234&lt;!-- 包裹表单元素 --&gt;&lt;label&gt;用户名：&lt;input type=\"text\"&gt;&lt;/label&gt;&lt;!-- 使用for属性关联表单元素的id属性 --&gt;&lt;label for=\"username\"&gt;用户名：&lt;/label&gt;&lt;input type=\"text\" id=\"username\"&gt; 可参考：HTML Form浅析之表单属性","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://ice-io.github.io/tags/HTML/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-08-25T10:01:56.635Z","updated":"2017-08-26T11:48:30.085Z","comments":true,"path":"2017/08/25/hello-world/","link":"","permalink":"http://ice-io.github.io/2017/08/25/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}